package components

import helpers "github.com/tego101/cartero-smtp-catch/lib"

type ButtonProps struct {
    Variant     string
    Id          string
    Type        string
    Text        string
    Name        string
    Class       string
    OnClick     string
    PrefixIcon  string
    SuffixIcon  string
    Loading     bool
}

var buttonStyle = map[string]string{
    "success":     " flex flex-row disabled:cursor-not-allowed disabled:opacity-60 items-center justify-between px-4 py-2 lg:text-sm font-medium tracking-wide transition-colors duration-200 rounded-full bg-green-500 text-white hover:bg-green-600 focus:ring-0 focus:ring-offset-0 focus:ring-green-500 focus:shadow-outline focus:outline-none",
    "primary":     " overflow-clip flex flex-row disabled:cursor-not-allowed disabled:opacity-60 items-center justify-between px-4 py-2 lg:text-sm font-medium tracking-wide transition-colors duration-200 rounded-full bg-black text-white hover:bg-black/90 focus:ring-0 focus:ring-offset-0 focus:ring-gray-900 focus:shadow-outline focus:outline-none",
    "secondary":   " flex flex-row items-center overflow-clip h-10 flex flex-row items-center justify-between px-4 py-2 lg:text-sm font-medium tracking-wide transition-colors duration-200 rounded-full bg-gray-200 text-slate-700 hover:bg-gray-300 focus:ring-0 focus:ring-offset-0 focus:ring-gray-900 focus:shadow-outline focus:outline-none",
    "outlined":    " flex flex-row items-center overflow-clip h-10 flex flex-row disabled:cursor-not-allowed disabled:opacity-60 items-center justify-between px-4 py-2 lg:text-sm font-medium tracking-wide transition-colors duration-200 rounded-full border border-gray-200 text-gray-700 hover:bg-gray-200 hover:text-gray-700 focus:ring-0 focus:ring-offset-0 focus:ring-gray-900 focus:shadow-outline focus:outline-none",
    "link":        " flex flex-row items-center overflow-clip h-10 underline hover:decoration-wavy flex flex-row disabled:cursor-not-allowed disabled:opacity-60 disabled:text-slate-400 disabled:hover:text-slate-500 items-center justify-between px-4 py-2 lg:text-sm font-medium tracking-wide transition-colors duration-200 rounded-full text-gray-700 hover:text-gray-700 focus:ring-0 focus:ring-offset-0 focus:ring-gray-900 focus:shadow-outline focus:outline-none",
    "destructive": " flex flex-row items-center disabled:opacity-60 overflow-clip h-10 flex flex-row disabled:cursor-not-allowed disabled:opacity-60 items-center justify-between px-4 py-2 lg:text-sm font-medium tracking-wide transition-colors duration-200 rounded-full bg-red-500/90 text-white hover:bg-red-600 focus:ring-0 focus:ring-offset-0 focus:ring-red-900 focus:shadow-outline focus:outline-none",
    "prespective": " flex flex-row items-center disabled:opacity-60 h-10 relative inline-block px-8 py-3 disabled:cursor-not-allowed font-medium group items-center justify-between px-4 py-2 lg:text-sm font-medium tracking-wide transition-colors duration-200",
    "shine":       " flex flex-row items-center border border-slate-800 disabled:opacity-60 h-10 relative inline-flex items-center disabled:cursor-not-allowed justify-start px-6 py-3 overflow-hidden font-medium transition-all bg-white rounded hover:bg-white group",
    "push":        " flex flex-row items-center disabled:opacity-60 h-10 relative px-6 py-3 font-bold text-white rounded-lg group disabled:cursor-not-allowed",
    "expand":      " rounded-full border flex flex-row items-center disabled:cursor-not-allowed disabled:opacity-60 h-10 relative inline-block px-8 py-3 text-black transition bg-white border border-current group",
    "tilt":        " flex flex-row items-center disabled:opacity-60 h-10 relative px-10 py-3 font-medium text-white group disabled:cursor-not-allowed",
}

func getIconClasses(variant string) string {
    baseClasses := "flex items-center justify-center transition-colors duration-200"
    switch variant {
    case "shine":
        return baseClasses + " relative z-10 group-hover:text-white" // Added z-10 and relative
    case "expand":
        return baseClasses + " relative z-10 group-hover:text-white"
    case "push", "prespective":
        return baseClasses + " relative z-10 group-hover:text-black"
    case "tilt":
        return baseClasses + " relative z-10 dark:group-hover:text-black"
    default:
        return baseClasses
    }
}

func getLoaderClasses(variant string) string {
    baseClasses := "w-6 h-6 mx-2 animate-spin text-white"
    switch variant {
    case "shine", "expand":
        return baseClasses + " group-hover:text-white"
    case "push", "prespective":
        return baseClasses + " group-hover:text-black"
    default:
        return baseClasses
    }
}

func shouldRenderText(text string, variant string) bool {
	if text == "" {
		return false
	}
	unsupportedVariants := map[string]bool{
		"prespective": true,
		"shine":       true,
		"push":        true,
		"expand":      true,
		"tilt":        true,
	}
	return !unsupportedVariants[variant]
}

templ ButtonComponent(props ButtonProps, attrs templ.Attributes) {
    <button
        { attrs... }
        id={ helpers.GenerateUniqueKey(props.Name) }
        if props.Variant == "" {
            class={ props.Class + " space-x-2 " + buttonStyle["primary"] }
        } else {
            class={ props.Class + " space-x-2 " + buttonStyle[props.Variant] }
        }
        if props.Type != "" {
            type={ props.Type }
        }
        if props.Type == "" {
            type="button"
        }
        x-cloak
        x-data="{
            isLoading: false
        }"
    >
        if props.PrefixIcon != "" {
            <div class={ getIconClasses(props.Variant) }>
                @templ.Raw(props.PrefixIcon)
            </div>
        }
        
        if shouldRenderText(props.Text, props.Variant) {
            <span class="font-bold">{ props.Text }</span>
        }

        if props.Variant == "tilt" {
            <span class="absolute inset-0 w-full h-full transition-all duration-300 ease-out transform translate-x-0 -skew-x-12 bg-black dark:bg-white group-hover:bg-white group-hover:border group-hover:border-white group-hover:skew-x-12"></span>
            <span class="absolute inset-0 w-full h-full transition-all duration-300 ease-out transform skew-x-12 bg-white border border-black dark:bg-black group-hover:bg-black group-hover:-skew-x-12"></span>
            <span class="absolute bottom-0 left-0 hidden w-10 h-20 transition-all duration-100 ease-out transform -translate-x-8 translate-y-10 bg-purple-600 -rotate-12"></span>
            <span class="absolute bottom-0 right-0 hidden w-10 h-20 transition-all duration-100 ease-out transform translate-x-10 translate-y-8 bg-purple-400 -rotate-12"></span>
            <span class="relative font-bold text-black dark:text-white group-hover:text-white">{ props.Text }</span>
        }
        
        if props.Variant == "expand" {
            <span class="absolute inset-y-0 left-0 w-0 transition-all bg-black rounded-full group-hover:w-full"></span>
            <span class="relative font-bold text-black transition-colors group-hover:text-white">{ props.Text }</span>
        }
        
        if props.Variant == "push" {
            <span class="absolute inset-0 w-full h-full transition duration-300 ease-out transform -translate-x-1 -translate-y-1 bg-black rounded-full dark:bg-black group-hover:translate-x-0 group-hover:translate-y-0"></span>
            <span class="absolute inset-0 w-full h-full transition duration-300 ease-out transform translate-x-1 translate-y-1 bg-white border-2 border-black rounded-full dark:bg-white dark:group-hover:bg-black group-hover:translate-x-0 group-hover:translate-y-0 group-hover:bg-black"></span>
            <span class="relative font-bold text-black dark:text-black group-hover:text-white dark:group-hover:text-white">{ props.Text }</span>
        }
        
        if props.Variant == "shine" {
            <span class="w-48 h-48 rounded rotate-[-40deg] bg-black dark:bg-white absolute bottom-0 left-0 -translate-x-full ease-out duration-500 transition-all translate-y-full mb-9 ml-9 group-hover:text-white group-hover:ml-0 group-hover:mb-32 group-hover:translate-x-0"></span>
            <span class="relative w-full font-bold text-left text-black transition-colors duration-300 ease-in-out dark:text-white group-hover:text-white dark:group-hover:text-black">{ props.Text }</span>
        }
        
        if props.Variant == "prespective" {
            <span class="absolute inset-0 w-full h-full transition duration-200 ease-out transform translate-x-1 translate-y-1 bg-black rounded-full dark:bg-white group-hover:-translate-x-0 group-hover:-translate-y-0"></span>
            <span class="absolute inset-0 w-full h-full bg-white border-2 border-black rounded-full dark:bg-black/90 dark:border-white group-hover:bg-white"></span>
            <span class="relative font-bold text-black group-hover:text-black dark:text-white">{ props.Text }</span>
        }

        if props.SuffixIcon != "" && !props.Loading {
            <div class={ getIconClasses(props.Variant) }>
                @templ.Raw(props.SuffixIcon)
            </div>
        }

        if props.Loading {
            <svg id="loader" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={ getLoaderClasses(props.Variant) }><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>
        }
        
        <svg x-show="isLoading" id="loader" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class={ getLoaderClasses(props.Variant) }><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>
    </button>
}

templ Button(props ButtonProps, attrs templ.Attributes) {
    @ButtonComponent(props, attrs)
}