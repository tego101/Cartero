package components

import (
	"bytes"
	"encoding/base64"
	helpers "github.com/tego101/cartero-smtp-catch/lib"
	"github.com/tego101/cartero-smtp-catch/types"
	"io"
	"mime"
	"mime/multipart"
	"mime/quotedprintable"
	"net/http"
	"net/mail"
	"strings"
	"strconv"
)

templ Email(email types.EmailProps, w http.ResponseWriter) {
	<div
		class="flex flex-col space-y-2 text-black fade-in-div"
	>
		<div class="flex flex-row items-center justify-between space-x-2">
			<div>
				@BreadCrumbs(
					BreadCrumbsProps{
						Links: []BreadCrumbItem{
							{Name: "", Link: "/inbox", Icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-indigo-500 lucide lucide-mailbox"><path d="M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z"/><polyline points="15,9 18,9 18,11"/><path d="M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2"/><line x1="6" x2="7" y1="10" y2="10"/></svg>`},
							{Icon: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mail-open"><path d="M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z"/><path d="m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10"/></svg>`, Bold: true, Name: email.Subject},
						},
						Separator: "/",
					},
				)
			</div>
			<div class="">
				@Button(ButtonProps{
					Variant:    "outlined",
					Name:       "delete_button",
					Text:       "",
					Class:      "text-sm",
					PrefixIcon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 size-4 text-red-500"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg>`,
				}, templ.Attributes{
					"id": "delete_button",
    "hx-confirm": "Are you sure you want to delete this email?",
    "hx-post": "/mail/delete/" + strconv.Itoa(email.ID),
    "hx-trigger": "click",
    "hx-swap": "innerHTML",         // Swap the inner HTML
    "hx-indicator": ".htmx-indicator",
				})
				<span class="htmx-indicator">Loading...</span>
			</div>
		</div>
		<div
			class="relative w-full p-4 border-b border-dashed border-slate-400"
		>
			<div
				class="grid grid-cols-1 gap-2"
			>
				<div class="inline-flex items-center justify-between w-full space-x-2 text-md">
					<div class="opacity-40 w-full max-w-[40px] top-0 left-0 right-0 h-1 rounded-full bg-clip-content" style="background-image: repeating-linear-gradient(to right, #e0e0e0, #e0e0e0 10px, #ff0000 10px, #ff0000 20px, #0000ff 20px, #0000ff 30px);"></div>
					<div class="text-sm">{  helpers.TimeParseFormat(email.Timestamp) }</div>
				</div>
				<div class="text-sm"><span class="px-2 mr-2 font-semibold text-white bg-indigo-500 border-b border-indigo-800 rounded-full">from</span>&nbsp;{ email.From }</div>
				<div class="text-md"><span class="px-2 mr-2 font-semibold text-white bg-indigo-500 border-b border-indigo-800 rounded-full">to</span>&nbsp;{ email.To }</div>
			</div>
		</div>
		<div class="w-full p-4 bg-slate-200/40 rounded-2xl">
			<div class="flex items-center items-end justify-end pb-4">
				<h1 class="px-4 py-1 text-sm font-bold text-white bg-black rounded-full">HTML</h1>
			</div>
			<div class="text-black break-words">
				@templ.Raw(parseRAWHTML(email.Raw))
			</div>
		</div>
		<div
			x-data="{ expanded: false }"
			class="relative w-full p-4 py-4 border border-slate-200 rounded-2xl"
		>
			<div class="flex items-center items-end justify-between pb-4">
				@Button(ButtonProps{
					Variant:    "linked",
					Name:       "open_body_button",
					Text:       "",
					Class:      "text-sm transition-all duration-500 ease-in-out",
					PrefixIcon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-square-chevron-down text-slate-500"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="m16 10-4 4-4-4"/></svg>`,
				}, templ.Attributes{
					"id":         "open_body_button",
					"x-show":     "!expanded",
					"x-on:click": "expanded = ! expanded",
				})
				@Button(ButtonProps{
					Variant:    "linked",
					Name:       "close_body_button",
					Text:       "",
					Class:      "text-sm transition-all duration-500 ease-in-out",
					PrefixIcon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="rotate-180 lucide lucide-square-chevron-down"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="m16 10-4 4-4-4"/></svg>`,
				}, templ.Attributes{
					"id":         "close_body_button",
					"x-show":     "expanded",
					"x-on:click": "expanded = ! expanded",
				})
				<h1 class="px-4 py-1 text-sm font-bold text-white bg-black rounded-full">BODY</h1>
			</div>
			<div class="break-words fade-in-div" x-show="expanded" x-collapse>
				@templ.Raw(email.Body)
			</div>
		</div>
		<div
			x-data="{ expanded: false }"
			class="relative w-full p-4 py-4 border border-red-200 rounded-2xl"
		>
			<div class="flex items-center items-end justify-between pb-4">
				@Button(ButtonProps{
					Variant:    "linked",
					Name:       "open_raw_button",
					Text:       "",
					Class:      "text-sm transition-all duration-500 ease-in-out",
					PrefixIcon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-square-chevron-down text-slate-500"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="m16 10-4 4-4-4"/></svg>`,
				}, templ.Attributes{
					"id":         "open_raw_button",
					"x-show":     "!expanded",
					"x-on:click": "expanded = ! expanded",
				})
				@Button(ButtonProps{
					Variant:    "linked",
					Name:       "close_raw_button",
					Text:       "",
					Class:      "text-sm transition-all duration-500 ease-in-out",
					PrefixIcon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="rotate-180 lucide lucide-square-chevron-down"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="m16 10-4 4-4-4"/></svg>`,
				}, templ.Attributes{
					"id":         "close_raw_button",
					"x-show":     "expanded",
					"x-on:click": "expanded = ! expanded",
				})
				<h1 class="px-4 py-1 text-sm font-bold text-white bg-black rounded-full">RAW</h1>
			</div>
			<div class="break-words" x-show="expanded" x-collapse.min.20px>{ email.Raw }</div>
		</div>
		<div
			x-data="{ expanded: false }"
			class="relative w-full p-4 py-4 border border-red-200 rounded-2xl opacity-10"
		>
			<div class="flex items-center items-end justify-between pb-4">
				@Button(ButtonProps{
					Variant:    "linked",
					Name:       "open_raw_button",
					Text:       "",
					Class:      "text-sm transition-all duration-500 ease-in-out",
					PrefixIcon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-square-chevron-down text-slate-500"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="m16 10-4 4-4-4"/></svg>`,
				}, templ.Attributes{
					"id":         "open_raw_button",
					"x-show":     "!expanded",
					"x-on:click": "expanded = ! expanded",
					"disabled":   true,
				})
				@Button(ButtonProps{
					Variant:    "linked",
					Name:       "close_raw_button",
					Text:       "",
					Class:      "text-sm transition-all duration-500 ease-in-out",
					PrefixIcon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="rotate-180 lucide lucide-square-chevron-down"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="m16 10-4 4-4-4"/></svg>`,
				}, templ.Attributes{
					"id":         "close_raw_button",
					"x-show":     "expanded",
					"x-on:click": "expanded = ! expanded",
					"disabled":   true,
				})
				<h1 class="px-4 py-1 text-sm font-bold text-white bg-black rounded-full">ATTACHMENTS</h1>
			</div>
			<div class="break-words" x-show="expanded" x-collapse.min.20px>{ "/todo" }</div>
		</div>
	</div>
}

func parseRAWHTML(raw string) string {
	msg, err := mail.ReadMessage(strings.NewReader(raw))
	if err != nil {
		return raw
	}

	mediaType, params, err := mime.ParseMediaType(msg.Header.Get("Content-Type"))
	if err != nil || !strings.HasPrefix(mediaType, "multipart/") {
		body, _ := io.ReadAll(msg.Body)
		return string(body)
	}

	boundary := params["boundary"]
	mr := multipart.NewReader(msg.Body, boundary)
	htmlContent, plainContent := parseMultipart(mr)

	// Return HTML if available, else plain text wrapped in <pre> tags
	if htmlContent != "" {
		return htmlContent
	} else if plainContent != "" {
		return "<pre>" + plainContent + "</pre>"
	}
	return raw
}

func parseMultipart(mr *multipart.Reader) (string, string) {
	var htmlContent, plainContent string

	for {
		part, err := mr.NextPart()
		if err == io.EOF {
			break
		}
		if err != nil {
			continue
		}

		contentType := part.Header.Get("Content-Type")
		encoding := strings.ToLower(part.Header.Get("Content-Transfer-Encoding"))

		content, err := decodePart(part, encoding)
		if err != nil {
			continue
		}

		if strings.Contains(contentType, "multipart/") {
			// Recursive parsing for nested multiparts
			subMr := multipart.NewReader(part, part.Header.Get("boundary"))
			subHTML, subPlain := parseMultipart(subMr)
			if subHTML != "" {
				htmlContent = subHTML
			}
			if subPlain != "" && plainContent == "" {
				plainContent = subPlain
			}
		} else if strings.Contains(contentType, "text/html") {
			htmlContent = content
		} else if strings.Contains(contentType, "text/plain") {
			plainContent = content
		}
	}

	return htmlContent, plainContent
}

func decodePart(part *multipart.Part, encoding string) (string, error) {
	var buf bytes.Buffer
	var reader io.Reader = part

	// Choose decoding strategy based on encoding type
	switch encoding {
	case "quoted-printable":
		reader = quotedprintable.NewReader(part)
	case "base64":
		reader = base64.NewDecoder(base64.StdEncoding, part)
	}

	if _, err := io.Copy(&buf, reader); err != nil {
		return "", err
	}

	return buf.String(), nil
}
